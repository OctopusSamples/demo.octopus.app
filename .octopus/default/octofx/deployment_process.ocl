step "Approve Production Release" {

    action {
        action_type = "Octopus.Manual"
        environments = ["Production"]
        is_required = true
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Please provide approval notes."
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""
    }
}

step "Deploy Database Changes" {

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.ConfigurationVariables"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Azure DevOps Artifacts"
            Octopus.Action.Package.PackageId = "OctoFX.Database"
            Octopus.Action.Script.ScriptFileName = "Deploy.ps1"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool_variable = "OctoFX.WorkerPool"

        packages {
            acquisition_location = "Server"
            feed = "Azure DevOps Artifacts"
            package_id = "OctoFX.Database"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Deploy Rate Service" {
    properties = {
        Octopus.Action.TargetRoles = "octofx-service"
    }

    action {
        action_type = "Octopus.WindowsService"
        properties = {
            Octopus.Action.EnabledFeatures = ",Octopus.Features.WindowsService,Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Azure DevOps Artifacts"
            Octopus.Action.Package.PackageId = "OctoFX.RateService"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.WindowsService.CreateOrUpdateService = "True"
            Octopus.Action.WindowsService.Description = "OctoFX Rate Service"
            Octopus.Action.WindowsService.DesiredStatus = "Default"
            Octopus.Action.WindowsService.DisplayName = "OctoFX Rate Service"
            Octopus.Action.WindowsService.ExecutablePath = "OctoFX.RateService.exe"
            Octopus.Action.WindowsService.ServiceAccount = "LocalSystem"
            Octopus.Action.WindowsService.ServiceName = "OctoFX-Rate-Service"
            Octopus.Action.WindowsService.StartMode = "auto"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "Azure DevOps Artifacts"
            package_id = "OctoFX.RateService"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Deploy Trading Site" {
    properties = {
        Octopus.Action.MaxParallelism = "1"
        Octopus.Action.TargetRoles = "octofx-web"
    }

    action "Remove from Azure Load Balancer" {
        action_type = "Octopus.AzurePowerShell"
        environments = ["Production"]
        properties = {
            Octopus.Action.Azure.AccountId = "Demo Subscription"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $resourceGroup = "demo.octopus.app"
                $loadBalancer = "demo-loadbalancer"
                $addressPool = "octofx-web-production"
                $ipConfig = "ipconfig1"
                $nic = $OctopusParameters["OctoFX.VM.Nic"]
                
                az network nic ip-config address-pool remove -g $resourceGroup --lb-name $loadBalancer --address-pool $addressPool --ip-config-name $ipConfig --nic-name $nic
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"

        container {
            feed = "Docker Hub"
            image = "octopusdeploy/worker-tools:3.3.2-ubuntu.18.04"
        }
    }

    action "Remove from Load Balancer" {
        action_type = "Octopus.Script"
        environments = ["Production"]
        properties = {
            Octopus.Action.Script.ScriptBody = "Write-Host \"Removing from load balancer\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = "OctoFX.WorkerPool"
    }

    action "Deploy Trading Site" {
        action_type = "Octopus.IIS"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.IISWebSite,Octopus.Features.ConfigurationVariables,Octopus.Features.ConfigurationTransforms"
            Octopus.Action.IISWebSite.ApplicationPoolFrameworkVersion = "v4.0"
            Octopus.Action.IISWebSite.ApplicationPoolIdentityType = "ApplicationPoolIdentity"
            Octopus.Action.IISWebSite.ApplicationPoolName = "#{OctoFX.TradingSite.AppPoolName}"
            Octopus.Action.IISWebSite.Bindings = "[{\"protocol\":\"http\",\"port\":\"80\",\"host\":\"\",\"thumbprint\":null,\"certificateVariable\":null,\"requireSni\":\"False\",\"enabled\":\"True\"}]"
            Octopus.Action.IISWebSite.CreateOrUpdateWebSite = "True"
            Octopus.Action.IISWebSite.DeploymentType = "webSite"
            Octopus.Action.IISWebSite.EnableAnonymousAuthentication = "True"
            Octopus.Action.IISWebSite.EnableBasicAuthentication = "False"
            Octopus.Action.IISWebSite.EnableWindowsAuthentication = "False"
            Octopus.Action.IISWebSite.StartApplicationPool = "True"
            Octopus.Action.IISWebSite.StartWebSite = "True"
            Octopus.Action.IISWebSite.WebApplication.ApplicationPoolFrameworkVersion = "v4.0"
            Octopus.Action.IISWebSite.WebApplication.ApplicationPoolIdentityType = "ApplicationPoolIdentity"
            Octopus.Action.IISWebSite.WebRootType = "packageRoot"
            Octopus.Action.IISWebSite.WebSiteName = "#{OctoFX.TradingSite.Name}"
            Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles = "True"
            Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Azure DevOps Artifacts"
            Octopus.Action.Package.PackageId = "OctoFX.TradingWebsite"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "Azure DevOps Artifacts"
            package_id = "OctoFX.TradingWebsite"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }

    action "Smoke Test Trading Site" {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $URI = $OctopusParameters["OctoFX.TradingSite.Url"]
                Invoke-WebRequest -URI "${URI}" -UseBasicParsing
                
                Write-Highlight "[$URI](${URI})"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = "OctoFX.WorkerPool"
    }

    action "Add to Load Balancer" {
        action_type = "Octopus.Script"
        environments = ["Production"]
        properties = {
            Octopus.Action.Script.ScriptBody = "Write-Host \"Adding to load balancer\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = "OctoFX.WorkerPool"
    }

    action "Add to Azure Load Balancer" {
        action_type = "Octopus.AzurePowerShell"
        environments = ["Production"]
        properties = {
            Octopus.Action.Azure.AccountId = "Demo Subscription"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $resourceGroup = "demo.octopus.app"
                $loadBalancer = "demo-loadbalancer"
                $addressPool = "octofx-web-production"
                $ipConfig = "ipconfig1"
                $nic = $OctopusParameters["OctoFX.VM.Nic"]
                
                az network nic ip-config address-pool add -g $resourceGroup --lb-name $loadBalancer --address-pool $addressPool --ip-config-name $ipConfig --nic-name $nic
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "Hosted Ubuntu"

        container {
            feed = "Docker Hub"
            image = "octopusdeploy/worker-tools:3.3.2-ubuntu.18.04"
        }
    }
}

step "Email Managers" {

    action {
        action_type = "Octopus.Email"
        environments = ["Production"]
        properties = {
            Octopus.Action.Email.Body = "#{Octopus.Release.Notes}"
            Octopus.Action.Email.IsHtml = "True"
            Octopus.Action.Email.Subject = "Release #{Octopus.Release.Number} has been deployed to #{Octopus.Environment.Name}"
            Octopus.Action.Email.ToTeamIds = "Octopus Managers"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""
    }
}